from __future__ import absolute_import, print_function
from os import path
import os
from subprocess import call

from ..basepackager import BasePackager


class Python27LambdaPackage(BasePackager):

    file_extensions = ['.py', '.pyo', '.so']

    def build_code(self):
        """ The way to get bundle dependencies """
        if not path.isfile(path.join(self.tmpdir, 'requirements.txt')):
            return

        oldpwd = os.getcwd()
        os.chdir(self.tmpdir)

        call('pip install --requirement requirements.txt --target .'.split(' '))

        # We need to create a __init__.py per code directory without it.
        # This is required to not create a PYTHONPATH with all directories.
        #
        for (current_dir, directories, files) in os.walk('.', topdown=False):
            if current_dir.endswith('.dist-info'):
                # This is a python metadirectory, we can skip it
                continue
            namespacer = path.join(current_dir, '__init__.py')
            if not path.isfile(namespacer):
                print("Creating file {0}".format(namespacer))
                with open(namespacer, 'w') as nmf:
                    nmf.write('# File Generated by lambdamanager packager')

        os.chdir(oldpwd)
